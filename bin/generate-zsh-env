#!/usr/bin/python

"""Generate/Read/Write settings for zsh env.

"""

import os
import sys
import commands

def decode(path):
	f = open(path).read()
	def split(t):
		b = t.replace('export','').strip().split('=',1)
		return (b[0], b[1][1:-1])
	return dict([split(i) for i in f.split('\n') if len(i.strip().split('=')) > 1])

def encode(path,obj):
	f = open(path, 'w')
	for k, v in obj.iteritems():
		f.write('export %s="%s"\n' % (k, v))
	f.close()

def help_list():
	help_text = os.environ['USER_CONFIG_HELP']
	return dict([i.split(' - ',1) for i in help_text.split('\n') if len(help_text.split(' - ', 1)) == 2])

env_path = os.path.expanduser(sys.argv[1])
env_dir = os.path.dirname(env_path)

if not os.path.exists(env_dir):
	print '[init] create %s' % env_dir
	os.makedirs(env_dir)
if not os.path.exists(env_path):
	print '[init] create %s' % env_path
	f = open(env_path, 'w')
	f.write('')
	f.close()

if len(sys.argv) == 2:
	helps = help_list()
	for k, v in decode(env_path).iteritems():
		if k in helps:
			help_text = helps[k]
		else:
			help_text = 'unknown settings'
		print '%s: %s[%s]' % (k, v, help_text)

if len(sys.argv) == 3:
	helps = help_list()
	if sys.argv[2] in helps:
		help_text = helps[sys.argv[2]]
	else:
		help_text = 'unknown settings'
	print '%s: %s[%s]' % (sys.argv[2], decode(env_path)[sys.argv[2]], help_text)

if len(sys.argv) == 4:
	obj = decode(env_path)
	obj[sys.argv[2]] = sys.argv[3]
	encode(sys.argv[1],obj)
