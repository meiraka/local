# ======
# colors
# ======
set-window-option -g status-bg 0
set-window-option -g status-fg white

set-window-option -g utf8 37
set-window-option -g mode-bg white
set-window-option -g mode-fg black

set-window-option -g window-status-fg white
set-window-option -g window-status-bg 0
set-window-option -g window-status-format "#W "

set-window-option -g window-status-current-fg colour088
set-window-option -g window-status-current-bg 0
set-window-option -g window-status-current-format "#W "

set -g pane-border-fg colour232
set -g pane-border-bg 8
set -g pane-active-border-fg colour237
set -g pane-active-border-bg 8

set -g status-left-length  180
set -g status-right-length 180

# status
set -g status-left         ' '
set -g status-right        '#(python ~/local/etc/tmux/status.py right)'

# basic options
set-option -g prefix C-f
set-option -sg escape-time 1
set-option -g default-terminal xterm-256color
set-option -g default-shell /bin/zsh

# ========
# keybinds
# ========

# send prefix to child tmux
bind-key -n C-f send-prefix

# reload config
bind-key -n M-R source-file ~/.tmux.conf \; \
           display-message "reloaded"

# detach
bind-key -n M-Q detach

# alt-NUM key as a switch workspace
set-option -g base-index 1
set-window-option -g pane-base-index 1
bind-key -n M-1 if-shell "tmux list-windows | grep ^1:" "select-window -t 1" "new-window -t 1 -n ♠"
bind-key -n M-2 if-shell "tmux list-windows | grep ^2:" "select-window -t 2" "new-window -t 2 -n ♤"
bind-key -n M-3 if-shell "tmux list-windows | grep ^3:" "select-window -t 3" "new-window -t 3 -n ♥"
bind-key -n M-4 if-shell "tmux list-windows | grep ^4:" "select-window -t 4" "new-window -t 4 -n ♡"
bind-key -n M-5 if-shell "tmux list-windows | grep ^5:" "select-window -t 5" "new-window -t 5 -n ♦"
bind-key -n M-6 if-shell "tmux list-windows | grep ^6:" "select-window -t 6" "new-window -t 6 -n ♢"
bind-key -n M-7 if-shell "tmux list-windows | grep ^7:" "select-window -t 7" "new-window -t 7 -n ♣"
bind-key -n M-8 if-shell "tmux list-windows | grep ^8:" "select-window -t 8" "new-window -t 8 -n ♧"
# alt-shift-NUM key as a move pane to workspace
bind-key -n "M-!" join-pane -t :1 \; last-window
bind-key -n "M-@" join-pane -t :2 \; last-window
bind-key -n "M-#" join-pane -t :3 \; last-window
bind-key -n "M-$" join-pane -t :4 \; last-window
bind-key -n "M-%" join-pane -t :5 \; last-window
bind-key -n "M-^" join-pane -t :6 \; last-window
bind-key -n "M-&" join-pane -t :7 \; last-window
bind-key -n "M-*" join-pane -t :8 \; last-window
# initialize workspace
if-shell "tmux list-windows | grep ^1:" "rename-window -t 1  ♠" "new-window -t 1 -n ♠  \; last-window" 
if-shell "tmux list-windows | grep ^2:" "rename-window -t 2  ♤" "new-window -t 2 -n ♤  \; last-window"
if-shell "tmux list-windows | grep ^3:" "rename-window -t 3  ♥" "new-window -t 3 -n ♥  \; last-window"
if-shell "tmux list-windows | grep ^4:" "rename-window -t 4  ♡" "new-window -t 4 -n ♡  \; last-window"
if-shell "tmux list-windows | grep ^5:" "rename-window -t 5  ♦" "new-window -t 5 -n ♦  \; last-window"
if-shell "tmux list-windows | grep ^6:" "rename-window -t 6  ♢" "new-window -t 6 -n ♢  \; last-window"
if-shell "tmux list-windows | grep ^7:" "rename-window -t 7  ♣" "new-window -t 7 -n ♣  \; last-window"
if-shell "tmux list-windows | grep ^8:" "rename-window -t 8  ♧" "new-window -t 8 -n ♧  \; last-window"

# disable new window creation
unbind-key "!"
unbind-key "
unbind-key "c"
unbind-key "'"
unbind-key "("
unbind-key ")"
unbind-key ","
unbind-key "-"
unbind-key "."

